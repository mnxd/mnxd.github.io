{
    "version": "https://jsonfeed.org/version/1",
    "title": "mnxd's blog",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/07/12/Event%20Dispatchers/",
            "url": "http://example.com/2023/07/12/Event%20Dispatchers/",
            "title": "",
            "date_published": "2023-07-12T15:37:59.398Z",
            "content_html": "<p>事件分发器是一种常用的设计模式，它可以将事件的发送者和接收者解耦，从而提高代码的可维护性和可扩展性。在 UE4 中，事件分发器是一种在不同对象或蓝图之间通信的方式。它们允许一个对象广播事件，任何已注册以侦听该事件的其他对象都将收到它。事件分发器通常用于处理游戏中的各种事件，比如玩家输入、碰撞检测、动画播放等等。</p>\n<p>UE4 中的事件分发器通常由两部分组成：事件发送者和事件接收者。事件发送者通常是一个 Actor 或者 Component，它负责发送事件。事件接收者通常是一个 Actor 或者 Component，它负责接收事件并做出相应的响应。</p>\n<p>UE4 中的事件分发器通常使用委托（Delegate）来实现。委托是一种特殊的函数指针，它可以指向一个或多个函数，并且可以在运行时动态添加或删除函数。在 UE4 中，委托通常用于事件的注册和响应。</p>\n<p>下面是一个简单的示例，演示了如何在 UE4 中使用事件分发器：</p>\n<p>首先，在事件发送者中定义一个委托：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE_EVENT(FMyEventSender, FMyEvent);</span><br></pre></td></tr></table></figure>\n<p>然后，在事件发送者中定义一个事件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FMyEvent MyEvent;</span><br></pre></td></tr></table></figure>\n<p>接着，在事件发送者中定义一个函数，用于触发事件：</p>\n<p MyEvent.Broadcast();=\"\">void FMyEventSender::TriggerEvent()</p>\n<p>在这个函数中，我们调用了 MyEvent.Broadcast () 函数，这个函数会触发事件，并将事件发送给所有注册了这个事件的委托。</p>\n<p>最后，在事件接收者中注册事件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyEventSender-&gt;MyEvent.AddUObject(this, &amp;AFoo::OnMyEvent);</span><br></pre></td></tr></table></figure>\n<p>在这个函数中，我们调用了 MyEventSender-&gt;MyEvent.AddUObject () 函数，这个函数会将当前对象的 OnMyEvent () 函数注册到 MyEvent 事件中。当事件触发时，所有注册了这个事件的委托都会被调用。在事件接收者中，我们可以定义一个函数，用于响应事件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void AFoo::OnMyEvent() &#123; // Do something &#125;</span><br></pre></td></tr></table></figure>\n<p>在这个函数中，我们可以编写相应的逻辑，用于处理事件。</p>\n<p>总的来说，UE4 中的事件分发器是一种非常强大的工具，它可以帮助我们实现复杂的游戏逻辑，并且提高代码的可维护性和可扩展性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在您的头文件中： DECLARE_EVENT(AMyActor, FMyEvent); FMyEvent MyEvent; </span><br><span class=\"line\"></span><br><span class=\"line\">// 在您的源文件中： void AMyActor::SomeFunction() &#123; // 广播事件 MyEvent.Broadcast(); &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">// 在另一个想要侦听事件的对象中：</span><br><span class=\"line\">void AMyOtherActor::BeginPlay()</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\tAMyActor* MyActor = ...;</span><br><span class=\"line\">\t// 获取将广播事件的参考 </span><br><span class=\"line\">\tMyActor-&gt;MyEvent.AddDynamic(this, &amp;AMyOtherActor::OnMyEvent);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">void AMyOtherActor::OnMyEvent() &#123;</span><br><span class=\"line\">// 当事件广播时，将调用此函数 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        }
    ]
}